input {
  beats {
    port => 5044
  }
  
  file {
    path => "/var/log/audiobook/*-combined.log"
    start_position => "beginning"
    codec => "json"
    tags => ["audiobook", "application"]
  }
  
  file {
    path => "/var/log/audiobook/*-error.log"
    start_position => "beginning"
    codec => "json"
    tags => ["audiobook", "error"]
  }
  
  file {
    path => "/var/log/audiobook/*-audit.log"
    start_position => "beginning"
    codec => "json"
    tags => ["audiobook", "audit"]
  }
  
  file {
    path => "/var/log/audiobook/*-metrics.log"
    start_position => "beginning"
    codec => "json"
    tags => ["audiobook", "metrics"]
  }
  
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp", "audiobook"]
  }
}

filter {
  if [service] {
    mutate {
      add_field => { "[@metadata][service]" => "%{service}" }
    }
  }
  
  if "error" in [tags] {
    mutate {
      add_field => { "log_level" => "error" }
    }
  }
  
  if "audit" in [tags] {
    mutate {
      add_field => { "log_type" => "audit" }
    }
  }
  
  if "metrics" in [tags] {
    mutate {
      add_field => { "log_type" => "metrics" }
    }
  }
  
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Add environment information
  mutate {
    add_field => {
      "environment" => "${NODE_ENV:development}"
      "application" => "audiobook-app"
    }
  }
  
  # Geolocation for IP addresses
  if [ip] and [ip] != "127.0.0.1" and [ip] != "::1" {
    geoip {
      source => "ip"
      target => "geoip"
    }
  }
  
  # Security event detection
  if [level] == "error" or [severity] in ["high", "critical"] {
    mutate {
      add_tag => ["security_alert"]
    }
  }
  
  # Performance monitoring
  if [duration] {
    ruby {
      code => "
        duration_str = event.get('duration').to_s
        if duration_str.end_with?('ms')
          duration_ms = duration_str.gsub('ms', '').to_f
          event.set('duration_ms', duration_ms)
          event.set('is_slow_request', duration_ms > 1000)
        end
      "
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "audiobook-%{+YYYY.MM.dd}"
    template_name => "audiobook"
    template_pattern => "audiobook-*"
    template => {
      "index_patterns" => ["audiobook-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0,
        "index.refresh_interval" => "30s"
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "message" => { "type" => "text" },
          "service" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "ip" => { "type" => "ip" },
          "statusCode" => { "type" => "integer" },
          "duration_ms" => { "type" => "float" },
          "is_slow_request" => { "type" => "boolean" },
          "userId" => { "type" => "keyword" },
          "requestId" => { "type" => "keyword" },
          "geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" },
              "country_name" => { "type" => "keyword" },
              "city_name" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }
  
  # Output to file for backup
  file {
    path => "/var/log/audiobook/processed/audiobook-%{+yyyy-MM-dd}.log"
    codec => json_lines
  }
  
  # Debug output (only in development)
  if "${NODE_ENV:development}" == "development" {
    stdout { codec => rubydebug }
  }
}