#!/bin/bash

# SSL/TLS Setup Script with Let's Encrypt
# This script sets up SSL certificates for the audiobook application

set -euo pipefail

echo "üîí Setting up SSL/TLS for audiobook-app..."

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "‚ö†Ô∏è  This script should not be run as root"
   exit 1
fi

# Configuration
DOMAIN=${1:-"${AUDIOBOOK_DOMAIN:-}"}
EMAIL=${2:-"${AUDIOBOOK_EMAIL:-}"}
STAGING=${3:-"${STAGING:-false}"}

if [[ -z "$DOMAIN" ]]; then
    echo "‚ùå Error: Domain name is required"
    echo "Usage: ./setup-ssl.sh <domain> <email> [staging]"
    echo "Example: ./setup-ssl.sh audiobook.example.com admin@example.com"
    exit 1
fi

if [[ -z "$EMAIL" ]]; then
    echo "‚ùå Error: Email address is required for Let's Encrypt"
    echo "Usage: ./setup-ssl.sh <domain> <email> [staging]"
    exit 1
fi

echo "üìù Configuration:"
echo "  Domain: $DOMAIN"
echo "  Email: $EMAIL"
echo "  Staging: $STAGING"
echo ""

# Create SSL directories
echo "üìÅ Creating SSL directories..."
mkdir -p ssl/live/$DOMAIN
mkdir -p ssl/archive/$DOMAIN
mkdir -p ssl/renewal
mkdir -p ssl/accounts

# Generate DH parameters for better security
echo "üîë Generating DH parameters (this may take a while)..."
if [[ ! -f ssl/dhparam.pem ]]; then
    openssl dhparam -out ssl/dhparam.pem 2048
    echo "‚úÖ DH parameters generated"
else
    echo "‚ÑπÔ∏è  DH parameters already exist"
fi

# Create self-signed certificates for development
if [[ "$DOMAIN" == "localhost" ]] || [[ "$DOMAIN" == *".local" ]] || [[ "$STAGING" == "true" ]]; then
    echo "üèóÔ∏è  Creating self-signed certificate for development..."
    
    # Create private key
    openssl genrsa -out ssl/live/$DOMAIN/privkey.pem 2048
    
    # Create certificate signing request
    openssl req -new -key ssl/live/$DOMAIN/privkey.pem -out ssl/live/$DOMAIN/cert.csr -subj "/C=US/ST=Development/L=Development/O=Audiobook App/OU=Development/CN=$DOMAIN"
    
    # Create self-signed certificate
    openssl x509 -req -in ssl/live/$DOMAIN/cert.csr -signkey ssl/live/$DOMAIN/privkey.pem -out ssl/live/$DOMAIN/cert.pem -days 365
    
    # Create fullchain (for self-signed, it's just the cert)
    cp ssl/live/$DOMAIN/cert.pem ssl/live/$DOMAIN/fullchain.pem
    
    # Create chain (empty for self-signed)
    touch ssl/live/$DOMAIN/chain.pem
    
    echo "‚úÖ Self-signed certificate created for $DOMAIN"
else
    # Production: Use Let's Encrypt
    echo "üåê Setting up Let's Encrypt certificate for production..."
    
    # Check if certbot is installed
    if ! command -v certbot &> /dev/null; then
        echo "‚ùå Certbot is not installed. Please install it first:"
        echo "   Ubuntu/Debian: sudo apt-get install certbot"
        echo "   CentOS/RHEL: sudo yum install certbot"
        echo "   macOS: brew install certbot"
        exit 1
    fi
    
    # Stop nginx temporarily if running
    if command -v nginx &> /dev/null && systemctl is-active --quiet nginx; then
        echo "‚è∏Ô∏è  Stopping nginx temporarily..."
        sudo systemctl stop nginx
        RESTART_NGINX=true
    fi
    
    # Request certificate
    CERTBOT_CMD="certbot certonly --standalone --non-interactive --agree-tos --email $EMAIL -d $DOMAIN"
    
    if [[ "$STAGING" == "true" ]]; then
        CERTBOT_CMD="$CERTBOT_CMD --staging"
        echo "‚ö†Ô∏è  Using Let's Encrypt staging environment"
    fi
    
    echo "üöÄ Requesting certificate from Let's Encrypt..."
    if sudo $CERTBOT_CMD; then
        echo "‚úÖ Let's Encrypt certificate obtained successfully"
        
        # Copy certificates to our ssl directory
        sudo cp -L /etc/letsencrypt/live/$DOMAIN/privkey.pem ssl/live/$DOMAIN/
        sudo cp -L /etc/letsencrypt/live/$DOMAIN/cert.pem ssl/live/$DOMAIN/
        sudo cp -L /etc/letsencrypt/live/$DOMAIN/chain.pem ssl/live/$DOMAIN/
        sudo cp -L /etc/letsencrypt/live/$DOMAIN/fullchain.pem ssl/live/$DOMAIN/
        
        # Fix permissions
        sudo chown -R $USER:$USER ssl/
        chmod 600 ssl/live/$DOMAIN/privkey.pem
        chmod 644 ssl/live/$DOMAIN/*.pem
        
    else
        echo "‚ùå Failed to obtain Let's Encrypt certificate"
        exit 1
    fi
    
    # Restart nginx if we stopped it
    if [[ "${RESTART_NGINX:-}" == "true" ]]; then
        echo "‚ñ∂Ô∏è  Restarting nginx..."
        sudo systemctl start nginx
    fi
fi

# Create nginx SSL configuration
echo "‚öôÔ∏è  Creating nginx SSL configuration..."
cat > ssl/nginx-ssl.conf << EOF
# SSL Configuration for Audiobook App
# Generated by setup-ssl.sh

ssl_certificate /etc/ssl/audiobook/live/$DOMAIN/fullchain.pem;
ssl_certificate_key /etc/ssl/audiobook/live/$DOMAIN/privkey.pem;
ssl_dhparam /etc/ssl/audiobook/dhparam.pem;

# SSL Settings
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

# SSL Session
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_stapling on;
ssl_stapling_verify on;

# Security Headers
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
add_header X-Frame-Options DENY always;
add_header X-Content-Type-Options nosniff always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' ws: wss:;" always;

# Hide nginx version
server_tokens off;
EOF

# Create renewal script for Let's Encrypt
if [[ "$DOMAIN" != "localhost" ]] && [[ "$DOMAIN" != *".local" ]] && [[ "$STAGING" != "true" ]]; then
    echo "üîÑ Creating certificate renewal script..."
    cat > ssl/renew-certs.sh << EOF
#!/bin/bash
# Certificate renewal script for $DOMAIN

echo "üîÑ Renewing SSL certificates..."

# Renew certificates
if sudo certbot renew --quiet; then
    echo "‚úÖ Certificates renewed successfully"
    
    # Copy renewed certificates
    sudo cp -L /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/ssl/audiobook/live/$DOMAIN/
    sudo cp -L /etc/letsencrypt/live/$DOMAIN/cert.pem /etc/ssl/audiobook/live/$DOMAIN/
    sudo cp -L /etc/letsencrypt/live/$DOMAIN/chain.pem /etc/ssl/audiobook/live/$DOMAIN/
    sudo cp -L /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/ssl/audiobook/live/$DOMAIN/
    
    # Fix permissions
    sudo chown -R audiobook:audiobook /etc/ssl/audiobook/
    chmod 600 /etc/ssl/audiobook/live/$DOMAIN/privkey.pem
    chmod 644 /etc/ssl/audiobook/live/$DOMAIN/*.pem
    
    # Reload nginx
    if systemctl is-active --quiet nginx; then
        sudo systemctl reload nginx
        echo "üîÑ Nginx reloaded"
    fi
    
    # Restart docker containers if running
    if command -v docker-compose &> /dev/null; then
        cd \$(dirname \$0)/..
        if docker-compose ps | grep -q Up; then
            docker-compose restart nginx
            echo "üîÑ Docker containers restarted"
        fi
    fi
    
    echo "‚úÖ Certificate renewal completed"
else
    echo "‚ùå Certificate renewal failed"
    exit 1
fi
EOF
    
    chmod +x ssl/renew-certs.sh
    
    # Add to crontab for automatic renewal
    echo "‚è∞ Setting up automatic certificate renewal..."
    (crontab -l 2>/dev/null; echo "0 2 * * 0 $(pwd)/ssl/renew-certs.sh >> $(pwd)/ssl/renewal.log 2>&1") | crontab -
    echo "‚úÖ Crontab updated for weekly certificate renewal"
fi

# Create Docker Compose SSL override
echo "üê≥ Creating Docker Compose SSL configuration..."
cat > docker-compose.ssl.yml << EOF
version: '3.8'

services:
  nginx:
    volumes:
      - ./ssl:/etc/ssl/audiobook:ro
      - ./nginx/nginx-ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
    ports:
      - "443:443"
    environment:
      - SSL_ENABLED=true
      - DOMAIN=$DOMAIN

  frontend:
    environment:
      - NEXT_PUBLIC_API_URL=https://$DOMAIN/api
      - NEXT_PUBLIC_AUTH_URL=https://$DOMAIN/auth
      - NEXT_PUBLIC_SSL_ENABLED=true

  auth:
    environment:
      - FRONTEND_URLS=https://$DOMAIN
      - SSL_ENABLED=true

  backend:
    environment:
      - FRONTEND_URLS=https://$DOMAIN
      - SSL_ENABLED=true
EOF

# Update nginx configuration for SSL
echo "üìù Creating production nginx configuration with SSL..."
mkdir -p nginx
cat > nginx/nginx-ssl.conf << EOF
# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # Include SSL configuration
    include /etc/nginx/conf.d/ssl.conf;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Frontend
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    # API Backend
    location /api/ {
        proxy_pass http://backend:5000/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Auth Service
    location /auth/ {
        proxy_pass http://auth:8002/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Static files
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Audio files
    location /audio/ {
        alias /var/www/audio/;
        expires 1h;
        add_header Cache-Control "public";
    }
}
EOF

echo ""
echo "‚úÖ SSL setup completed successfully!"
echo ""
echo "üìã Summary:"
echo "  - SSL certificates: ssl/live/$DOMAIN/"
echo "  - Nginx SSL config: nginx/nginx-ssl.conf"
echo "  - Docker SSL config: docker-compose.ssl.yml"
if [[ "$DOMAIN" != "localhost" ]] && [[ "$DOMAIN" != *".local" ]] && [[ "$STAGING" != "true" ]]; then
    echo "  - Renewal script: ssl/renew-certs.sh"
    echo "  - Auto-renewal: Configured in crontab"
fi
echo ""
echo "üöÄ To deploy with SSL:"
echo "  docker-compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.ssl.yml up -d"
echo ""
echo "üîí SSL certificate valid for: $DOMAIN"
echo "üìß Let's Encrypt notifications sent to: $EMAIL"